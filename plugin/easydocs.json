["CanaryEngine",["Package.GetEngineServer","Allows you to use the server sided version of CanaryEngine.",null,"EngineServer"],["Package.GetEngineClient","Allows you to use the client sided version of CanaryEngine.",null,"EngineClient"],["Package.CreateSignal","Creates a `ScriptSignal`, can be used in the same RunContext.",null,"CustomScriptSignal"],["Package.GetLatestPackageVersionAsync","Returns the latest version of a package. You can also log a warning in the console if you wish, and returns the current version of the package if the data request was successful.",["package, Instance, The package to check the version of, must have a `VersionNumber` and `PackageId` attribute, and the asset must have a 'Version: (number)' in its description.","warnIfNotLatestVersion, boolean?, An option to log a warning if the package version isn't the latest.","respectDebugger, boolean?, Tells the script to respect the debugger settings if the version is the latest one, automatically true."],"number?",["local Package = script.Parent\nlocal LatestPackageVersion = CanaryEngine.GetLatestPackageVersionAsync(Package, false)\n\nprint(LatestPackageVersion)\n-- Output: 26 (example)","local Package = script.Parent\nlocal LatestPackageVersion = CanaryEngine.GetLatestPackageVersionAsync(Package, true)\n\n-- Local version 24, latest 26.\n-- Output: Package 'MyPackage' is not up-to-date. Available version: 26"]],["EngineClient.CreateNetworkSignal","Creates a `NetworkSignal`, can be used in the other types of RunContexts.",["name, any, The name of the signal, automatically converted to a string."],"ClientNetworkController"],["EngineServer.CreateNetworkSignal","Creates a `NetworkSignal`, can be used in the other types of RunContexts.",["name, any, The name of the signal, automatically converted to a string."],"ServerNetworkController"],["EngineServer.GetDataService","Retrieves the main data service.",null,"DataService"],"Utility Library",["Utility.nilparam","Checks if a is nil and returns a default value, otherwise it returns the provided param to be checked.",["param, any, The parameter to check if nil.","default, any, The value to replace `param` if it is nil."],"any","local arg1 = nil\narg1 = Utility.nilparam(arg1, true)\n\nprint(arg1)\n-- Output: true"],["Utility.assert","Checks if the provided value is nil or false, then throws an error. If the value doesn't resolve to nil or false, then the assertion will be returned.",["assertion, any, The value to be asserted.","msg, any, The message to send if the value is not truthy or nil."],"any?"],["Utility.xassert","Similar to assert, but you can use a custom error handler.",["assertion, any, The value to be asserted","handler, () -> (), The function to be ran if `assertion` resolves to false or nil."]],["Utility.assertmulti","Does the same thing as assert, but takes multiple tables of assertions and errors for optimization and simplicity.",["... (Tuple), array, Same as assert, but takes multiple values to cut down on function calls. Used in the following order: {assertion, msg, msgFormat}"],null,"Utility.assertmulti({true == true, \"Lua is broken!!\"}, {1 == 2, \"This should error!\"})"],["Utility.DeepCopy","Deep copies the provided table. When deep copying, tables nested inside the provided table will be copied as well, where this usually isn't the case.",["t, array, The array that should be deep copied."],"array?"],["Utility.IsDictionary","Returns true if the provided table is a dictionary, while false if not.",["param, dictionary | array, The parameter to check if nil."],"boolean"],["Utility.DictionaryToArray","Converts a dictionary -> array.",["d, dictionary, The dictionary to convert."],"array"],["Utility.ArrayToDictionary","Converts an array -> dictionary",["t, array, The array to convert."],"dictionary"],["Utility.dictionaryLen","Running this function on a dictionary will allow you to use the length operator (#dict) on it.",["d, dictionary, The dictionary to set the metatable to."]],["Utility.GetAncestors","Gets all of the ancestors of the provided instance.",["instance, Instance, The instance to get all of the ancestors of."],"Instance"],["Utility.ConflictingValues","Iterates through a list of values and returns a boolean and a string. If the value is true, then a string will be returned with a list of values and their order in the original list. The function is useful for times when you only want 1 value to be used at a time. Example of function in use:",["values, array, A list of values to be checked.","sep, string?, The separator between each conflicting value index."],"(boolean, string?)","local Values = {true, false, true}\nlocal IsConflicting = Utility.ConflictingValues(values)\n\nprint(IsConflicting)\n-- Output: true, Conflicting Values: 1, 3"],["Utility.TableToString","Converts a array/dictionary -> string. An empty table will result in the function returning: '{}'. Example of function in use:",["t, table, The table to convert.","sep, string?, The separator between each element.","i, number?, The index to start at. (only for arrays)","j, number?, The index to end at. (only for arrays)"],"string?","local myArray = {\"This\", \"Is\", \"An\", \"Array!\", 1, 2, 3, true, false}\n\nprint(Utility.TableToString(myArray))\n-- Output: {[1] = \"This\", [2] = \"Is\", [3] = \"An\", [4] = \"Array!\", [5] = 1, [6] = 2, [7] = 3, [8] = true, [9] = false}"],"Benchmark Library",["Benchmark.CreateBenchmark","Creates a new benchmark object that can be used for benchmarking code.",null,"BenchmarkObject"],["BenchmarkObject:SetFunction","Sets a function that can be ran `timesToRun` times, and will return the amount of time it took to run the functions. Returns the amount of time it took to complete the `func` function `timesToRun` times.",["timesToRun, number, The amount of times to run the provided function.","func, (timesRan: number) -> (), The function run for each `timesToRun` index."],"number?"],["BenchmarkObject:Start","Starts a benchmark, please note that when using BenchmarkObject:SetFunction that it will start itself."],["BenchmarkObject:Stop","Stops a benchamrk, destroying it and returning the elapsed time. Please note that when using BenchmarkObject:SetFunction that it will stop once the function has run the provided amount of times and return the final amount of time.",null,"number"],["BenchmarkObject:GetCurrentTime","Gets the current time elapsed after starting the benchmark.",null,"number?"],["BenchmarkObject:Destroy","Destroys the benchmark, this is done automatically after BenchmarkObject:Stop is called."],"Statistics Library",["Statistics.GetMedian","Gets the number in the middle of a dataset. For example, the median in the following dataset is 7:",["numberList, array, The dataset of numbers to perform the function on."],"number",["{2, 5, 6, 8, 3, 8}","{2, 5, 6, 8, 3, 8}"]],["Statistics.GetMean","Gets the average/mean of all of the numbers.",["numberList, array, The dataset of numebrs to perform the function on."],"number"],["Statistics.GetMode","Gets the mode of a list, nil if none. A mode in a dataset is a number that occurs the most. If all numbers occur the same amount of times, then the mode is null/nil. For example, the mode of this dataset is 5:",["numberList, array, The dataset of numebrs to perform the function on."],"number?","{5, 5, 5, 7, 7, 3, 1}"]]