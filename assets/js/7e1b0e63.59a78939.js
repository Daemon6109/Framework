"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[746],{8592:e=>{e.exports=JSON.parse('{"functions":[{"name":"isInitiated","desc":"Checks if a provider has been initiated.\\n\\n\\n```lua\\nlocal initiated = Framework:isInitiated(provider)\\n```","params":[{"name":"provider","desc":"The provider to check","lua_type":"Provider"}],"returns":[{"desc":"True if the provider has been initiated","lua_type":"boolean"}],"function_type":"method","private":true,"source":{"line":100,"path":"src/Framework/init.luau"}},{"name":"startProvider","desc":"Starts the provider if it has a start function.\\n\\n\\n```lua\\nFramework:startProvider(provider)\\n```","params":[{"name":"provider","desc":"The provider to start","lua_type":"Provider"}],"returns":[],"function_type":"method","private":true,"source":{"line":116,"path":"src/Framework/init.luau"}},{"name":"initProvider","desc":"Initializes the provider if it has an init function and hasn\'t been initiated yet.\\n\\n\\n```lua\\nFramework:initProvider(provider)\\n```","params":[{"name":"provider","desc":"The provider to initialize","lua_type":"Provider"}],"returns":[],"function_type":"method","private":true,"source":{"line":139,"path":"src/Framework/init.luau"}},{"name":"add","desc":"Adds providers to the framework to be initialized and started.\\n\\n\\n```lua\\nFramework:add({ provider1, provider2 })\\n```","params":[{"name":"providers","desc":"A list of providers to add","lua_type":"{Instance}"}],"returns":[],"function_type":"method","source":{"line":167,"path":"src/Framework/init.luau"}},{"name":"init","desc":"Initializes the framework, initializing and starting all providers in order.\\n\\n\\n```lua\\nFramework:init({ Profiling = true })\\n```","params":[{"name":"config","desc":"Optional configuration","lua_type":"{Profiling: boolean?}"}],"returns":[],"function_type":"method","source":{"line":196,"path":"src/Framework/init.luau"}}],"properties":[],"types":[{"name":"Provider","desc":"A provider that can be added to the framework.\\nProviders can have optional `init` and `start` functions that are called in order.\\n`init` is called once and `start` is called every time the framework is started.\\n`order` can be used to specify the order in which providers are initialized and started.","fields":[{"name":"init?","lua_type":"(() -> ())","desc":"Optional initialization function"},{"name":"name","lua_type":"string","desc":"Name of the provider"},{"name":"start?","lua_type":"(() -> ())","desc":"Optional start function"},{"name":"order?","lua_type":"number","desc":"Optional order for initialization and starting"}],"private":true,"source":{"line":77,"path":"src/Framework/init.luau"}}],"name":"Framework","desc":"Framework\\nA simple framework for managing providers in Roblox with initialization and startup sequencing.\\nProviders are initialized and started in the order specified by their `order` field.\\nEach provider can have optional `init` and `start` functions. Providers can require other providers\\nthey depend on within their `init` or `start` methods as needed.\\nMemory profiling can be enabled for debugging purposes.\\n\\nUsage:\\n1. Create providers as ModuleScripts that return a table with optional `init`, `start`, and `order`.\\n2. Add providers using Framework.add({provider1, provider2, ...})\\n3. Initialize the framework using Framework.init({Profiling = true/false})\\n\\nNote: Providers are initialized and started in the order specified by their `order` field. If no order is specified,\\nproviders are initialized and started in the order they were added.","source":{"line":28,"path":"src/Framework/init.luau"}}')}}]);